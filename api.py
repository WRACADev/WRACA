# -*- coding: utf-8 -*-
"""api

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/19j1WwSmHQvICD8mIcNQhmuNjI4wVSqwC
"""

from fastapi import FastAPI, File, UploadFile
import librosa
import numpy as np
import joblib
import json

app = FastAPI()

model = joblib.load("genre_classification_model.pkl")

@app.post("/predict")
async def predict(file: UploadFile = File(...)):
    audio, sample_rate = librosa.load(file.file)
    feature = extract_features(file.filename)
    feature = feature.reshape(1, -1)
    prediction = model.predict(feature)
    metrics = analyze_audio(file.filename)
    return {"genre": prediction[0], "metrics": metrics}

@app.get("/library")
async def get_library():
    with open("radio_library.json", "r") as f:
        data = json.load(f)
    return data

def extract_features(file_name):
    try:
        audio, sample_rate = librosa.load(file_name)
        mfccs = np.mean(librosa.feature.mfcc(y=audio, sr=sample_rate, n_mfcc=40).T, axis=0)
        chroma = np.mean(librosa.feature.chroma_stft(y=audio, sr=sample_rate).T, axis=0)
        mel = np.mean(librosa.feature.melspectrogram(y=audio, sr=sample_rate).T, axis=0)
        contrast = np.mean(librosa.feature.spectral_contrast(y=audio, sr=sample_rate).T, axis=0)
        tonnetz = np.mean(librosa.feature.tonnetz(y=librosa.effects.harmonic(audio), sr=sample_rate).T, axis=0)
        return np.hstack([mfccs, chroma, mel, contrast, tonnetz])
    except Exception as e:
        print(f"Error encountered while parsing file: {file_name}")
        return None

def analyze_audio(file_name):
    audio, sample_rate = librosa.load(file_name)
    tempo, _ = librosa.beat.beat_track(y=audio, sr=sample_rate)
    spectral_centroid = np.mean(librosa.feature.spectral_centroid(y=audio, sr=sample_rate))
    spectral_bandwidth = np.mean(librosa.feature.spectral_bandwidth(y=audio, sr=sample_rate))
    rms = np.mean(librosa.feature.rms(y=audio))
    bass = np.mean(librosa.feature.spectral_bandwidth(y=audio, sr=sample_rate, freq=[20, 140]))
    mids = np.mean(librosa.feature.spectral_bandwidth(y=audio, sr=sample_rate, freq=[140, 400]))
    treble = np.mean(librosa.feature.spectral_bandwidth(y=audio, sr=sample_rate, freq=[400, 6000]))
    return {
        "BPM": tempo,
        "Spectral Centroid": spectral_centroid,
        "Spectral Bandwidth": spectral_bandwidth,
        "RMS": rms,
        "Bass": bass,
        "Mids": mids,
        "Treble": treble
    }

# Run the server with `uvicorn api:app --reload`